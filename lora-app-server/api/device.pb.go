// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	device.proto
	application.proto
	deviceQueue.proto
	common.proto
	user.proto
	gateway.proto
	organization.proto
	profiles.proto
	networkServer.proto
	serviceProfile.proto
	deviceProfile.proto

It has these top-level messages:
	DeviceKeys
	CreateDeviceRequest
	CreateDeviceResponse
	GetDeviceRequest
	GetDeviceResponse
	DeleteDeviceRequest
	DeleteDeviceResponse
	ListDeviceByApplicationIDRequest
	DeviceListItem
	ListDeviceResponse
	UpdateDeviceRequest
	UpdateDeviceResponse
	CreateDeviceKeysRequest
	CreateDeviceKeysResponse
	GetDeviceKeysRequest
	GetDeviceKeysResponse
	UpdateDeviceKeysRequest
	UpdateDeviceKeysResponse
	DeleteDeviceKeysRequest
	DeleteDeviceKeysResponse
	ActivateDeviceRequest
	ActivateDeviceResponse
	GetDeviceActivationRequest
	GetDeviceActivationResponse
	GetRandomDevAddrRequest
	GetRandomDevAddrResponse
	StreamDeviceFrameLogsRequest
	StreamDeviceFrameLogsResponse
	StreamDeviceEventLogsRequest
	StreamDeviceEventLogsResponse
	CreateApplicationRequest
	CreateApplicationResponse
	GetApplicationRequest
	GetApplicationResponse
	UpdateApplicationRequest
	UpdateApplicationResponse
	DeleteApplicationRequest
	DeleteApplicationResponse
	ListApplicationRequest
	ApplicationListItem
	ListApplicationResponse
	EmptyResponse
	HTTPIntegrationHeader
	HTTPIntegration
	GetHTTPIntegrationRequest
	DeleteIntegrationRequest
	ListIntegrationRequest
	ListIntegrationResponse
	EnqueueDeviceQueueItemRequest
	EnqueueDeviceQueueItemResponse
	FlushDeviceQueueRequest
	FlushDeviceQueueResponse
	DeviceQueueItem
	ListDeviceQueueItemsRequest
	ListDeviceQueueItemsResponse
	DataRate
	UplinkTXInfo
	UplinkRXInfo
	UplinkFrameLog
	DownlinkTXInfo
	DownlinkFrameLog
	OrganizationLink
	ProfileRequest
	ProfileResponse
	ProfileSettings
	LoginRequest
	LoginResponse
	ListUserRequest
	UserRequest
	AddUserResponse
	UserSettings
	GetUserResponse
	AddUserRequest
	AddUserOrganization
	UpdateUserRequest
	ListUserResponse
	UserEmptyResponse
	UpdateUserPasswordRequest
	BrandingRequest
	BrandingResponse
	CreateGatewayRequest
	CreateGatewayResponse
	GetGatewayRequest
	GetGatewayResponse
	DeleteGatewayRequest
	GenerateGatewayTokenRequest
	GenerateGatewayTokenResponse
	DeleteGatewayResponse
	ListGatewayRequest
	ListGatewayItem
	ListGatewayResponse
	UpdateGatewayRequest
	UpdateGatewayResponse
	GatewayStats
	GetGatewayStatsRequest
	GetGatewayStatsResponse
	CreateChannelConfigurationRequest
	CreateChannelConfigurationResponse
	GetChannelConfigurationRequest
	GetChannelConfigurationResponse
	UpdateChannelConfigurationRequest
	UpdateChannelConfigurationResponse
	DeleteChannelConfigurationRequest
	DeleteChannelConfigurationResponse
	ListChannelConfigurationsRequest
	ListChannelConfigurationsResponse
	CreateExtraChannelRequest
	CreateExtraChannelResponse
	UpdateExtraChannelRequest
	UpdateExtraChannelResponse
	DeleteExtraChannelRequest
	DeleteExtraChannelResponse
	GetExtraChannelResponse
	GetExtraChannelsForChannelConfigurationIDRequest
	GetExtraChannelsForChannelConfigurationIDResponse
	PingRX
	GetLastPingRequest
	GetLastPingResponse
	StreamGatewayFrameLogsRequest
	StreamGatewayFrameLogsResponse
	ListOrganizationRequest
	OrganizationRequest
	GetOrganizationResponse
	CreateOrganizationRequest
	CreateOrganizationResponse
	UpdateOrganizationRequest
	ListOrganizationResponse
	OrganizationEmptyResponse
	OrganizationUserRequest
	DeleteOrganizationUserRequest
	ListOrganizationUsersRequest
	GetOrganizationUserRequest
	GetOrganizationUserResponse
	ListOrganizationUsersResponse
	ServiceProfile
	DeviceProfile
	CreateNetworkServerRequest
	CreateNetworkServerResponse
	GetNetworkServerRequest
	GetNetworkServerResponse
	UpdateNetworkServerRequest
	UpdateNetworkServerResponse
	DeleteNetworkServerRequest
	DeleteNetworkServerResponse
	ListNetworkServerRequest
	ListNetworkServerResponse
	CreateServiceProfileRequest
	CreateServiceProfileResponse
	GetServiceProfileRequest
	GetServiceProfileResponse
	UpdateServiceProfileRequest
	UpdateServiceProfileResponse
	DeleteServiceProfileRequest
	DeleteServiceProfileResponse
	ListServiceProfileRequest
	ServiceProfileMeta
	ListServiceProfileResponse
	CreateDeviceProfileRequest
	CreateDeviceProfileResponse
	GetDeviceProfileRequest
	GetDeviceProfileResponse
	UpdateDeviceProfileRequest
	UpdateDeviceProfileResponse
	DeleteDeviceProfileRequest
	DeleteDeviceProfileResponse
	ListDeviceProfileRequest
	DeviceProfileMeta
	ListDeviceProfileResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceKeys struct {
	// HEX encoded application key.
	AppKey string `protobuf:"bytes,1,opt,name=appKey" json:"appKey,omitempty"`
}

func (m *DeviceKeys) Reset()                    { *m = DeviceKeys{} }
func (m *DeviceKeys) String() string            { return proto.CompactTextString(m) }
func (*DeviceKeys) ProtoMessage()               {}
func (*DeviceKeys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceKeys) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

type CreateDeviceRequest struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Name of the device (if left blank, it will be set to the DevEUI).
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// ID of the application to which the device must be added.
	ApplicationID int64 `protobuf:"varint,13,opt,name=applicationID" json:"applicationID,omitempty"`
	// Description of the device.
	Description string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	// DeviceProfileID attached to the device.
	DeviceProfileID string `protobuf:"bytes,18,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
}

func (m *CreateDeviceRequest) Reset()                    { *m = CreateDeviceRequest{} }
func (m *CreateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceRequest) ProtoMessage()               {}
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateDeviceRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *CreateDeviceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateDeviceRequest) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *CreateDeviceRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateDeviceRequest) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

type CreateDeviceResponse struct {
}

func (m *CreateDeviceResponse) Reset()                    { *m = CreateDeviceResponse{} }
func (m *CreateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceResponse) ProtoMessage()               {}
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetDeviceRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetDeviceRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type GetDeviceResponse struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Name of the device (if left blank, it will be set to the DevEUI).
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// ID of the application to which the device must be added.
	ApplicationID int64 `protobuf:"varint,13,opt,name=applicationID" json:"applicationID,omitempty"`
	// Description of the device.
	Description string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	// DeviceProfileID attached to the device.
	DeviceProfileID string `protobuf:"bytes,18,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
	// The device battery status
	// 0:      The end-device is connected to an external power source
	// 1..254: The battery level, 1 being at minimum and 254 being at maximum
	// 255:    The end-device was not able to measure the battery level
	// 256:    The device-status is not available.
	DeviceStatusBattery uint32 `protobuf:"varint,19,opt,name=deviceStatusBattery" json:"deviceStatusBattery,omitempty"`
	// The device margin status
	// -32..32: The demodulation SNR ration in dB
	// 256:     The device-status is not available.
	DeviceStatusMargin int32 `protobuf:"varint,20,opt,name=deviceStatusMargin" json:"deviceStatusMargin,omitempty"`
	// The last time the application-server received any data from the device,
	// or an empty string when the device never sent any data.
	LastSeenAt string `protobuf:"bytes,21,opt,name=lastSeenAt" json:"lastSeenAt,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetDeviceResponse) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *GetDeviceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetDeviceResponse) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *GetDeviceResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetDeviceResponse) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

func (m *GetDeviceResponse) GetDeviceStatusBattery() uint32 {
	if m != nil {
		return m.DeviceStatusBattery
	}
	return 0
}

func (m *GetDeviceResponse) GetDeviceStatusMargin() int32 {
	if m != nil {
		return m.DeviceStatusMargin
	}
	return 0
}

func (m *GetDeviceResponse) GetLastSeenAt() string {
	if m != nil {
		return m.LastSeenAt
	}
	return ""
}

type DeleteDeviceRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *DeleteDeviceRequest) Reset()                    { *m = DeleteDeviceRequest{} }
func (m *DeleteDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceRequest) ProtoMessage()               {}
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteDeviceRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type DeleteDeviceResponse struct {
}

func (m *DeleteDeviceResponse) Reset()                    { *m = DeleteDeviceResponse{} }
func (m *DeleteDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceResponse) ProtoMessage()               {}
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListDeviceByApplicationIDRequest struct {
	// ID of the application for which to list the devices.
	ApplicationID int64 `protobuf:"varint,3,opt,name=applicationID" json:"applicationID,omitempty"`
	// Max number of devices to return in the result-set.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Search against name or DevEUI
	Search string `protobuf:"bytes,4,opt,name=search" json:"search,omitempty"`
}

func (m *ListDeviceByApplicationIDRequest) Reset()         { *m = ListDeviceByApplicationIDRequest{} }
func (m *ListDeviceByApplicationIDRequest) String() string { return proto.CompactTextString(m) }
func (*ListDeviceByApplicationIDRequest) ProtoMessage()    {}
func (*ListDeviceByApplicationIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *ListDeviceByApplicationIDRequest) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *ListDeviceByApplicationIDRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListDeviceByApplicationIDRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListDeviceByApplicationIDRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type DeviceListItem struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Name of the device (if left blank, it will be set to the DevEUI).
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// ID of the application to which the device must be added.
	ApplicationID int64 `protobuf:"varint,13,opt,name=applicationID" json:"applicationID,omitempty"`
	// Description of the device.
	Description string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	// DeviceProfileID attached to the device.
	DeviceProfileID string `protobuf:"bytes,18,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
	// Device-profile name.
	DeviceProfileName string `protobuf:"bytes,19,opt,name=deviceProfileName" json:"deviceProfileName,omitempty"`
	// The device battery status
	// 0:      The end-device is connected to an external power source
	// 1..254: The battery level, 1 being at minimum and 254 being at maximum
	// 255:    The end-device was not able to measure the battery level
	// 256:    The device-status is not available.
	DeviceStatusBattery uint32 `protobuf:"varint,20,opt,name=deviceStatusBattery" json:"deviceStatusBattery,omitempty"`
	// The device margin status
	// -32..32: The demodulation SNR ration in dB
	// 256:     The device-status is not available.
	DeviceStatusMargin int32 `protobuf:"varint,21,opt,name=deviceStatusMargin" json:"deviceStatusMargin,omitempty"`
	// The last time the application-server received any data from the device,
	// or an empty string when the device never sent any data.
	LastSeenAt string `protobuf:"bytes,22,opt,name=lastSeenAt" json:"lastSeenAt,omitempty"`
}

func (m *DeviceListItem) Reset()                    { *m = DeviceListItem{} }
func (m *DeviceListItem) String() string            { return proto.CompactTextString(m) }
func (*DeviceListItem) ProtoMessage()               {}
func (*DeviceListItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeviceListItem) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *DeviceListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceListItem) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *DeviceListItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DeviceListItem) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

func (m *DeviceListItem) GetDeviceProfileName() string {
	if m != nil {
		return m.DeviceProfileName
	}
	return ""
}

func (m *DeviceListItem) GetDeviceStatusBattery() uint32 {
	if m != nil {
		return m.DeviceStatusBattery
	}
	return 0
}

func (m *DeviceListItem) GetDeviceStatusMargin() int32 {
	if m != nil {
		return m.DeviceStatusMargin
	}
	return 0
}

func (m *DeviceListItem) GetLastSeenAt() string {
	if m != nil {
		return m.LastSeenAt
	}
	return ""
}

type ListDeviceResponse struct {
	// Total number of devices available within the result-set.
	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Devices within this result-set.
	Result []*DeviceListItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListDeviceResponse) Reset()                    { *m = ListDeviceResponse{} }
func (m *ListDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDeviceResponse) ProtoMessage()               {}
func (*ListDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListDeviceResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListDeviceResponse) GetResult() []*DeviceListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateDeviceRequest struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Name of the device (if left blank, it will be set to the DevEUI).
	Name string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// ID of the application to which the device must be added.
	ApplicationID int64 `protobuf:"varint,13,opt,name=applicationID" json:"applicationID,omitempty"`
	// Description of the device.
	Description string `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	// DeviceProfileID attached to the device.
	DeviceProfileID string `protobuf:"bytes,18,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateDeviceRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *UpdateDeviceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateDeviceRequest) GetApplicationID() int64 {
	if m != nil {
		return m.ApplicationID
	}
	return 0
}

func (m *UpdateDeviceRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateDeviceRequest) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

type UpdateDeviceResponse struct {
}

func (m *UpdateDeviceResponse) Reset()                    { *m = UpdateDeviceResponse{} }
func (m *UpdateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceResponse) ProtoMessage()               {}
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CreateDeviceKeysRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI     string      `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	DeviceKeys *DeviceKeys `protobuf:"bytes,2,opt,name=deviceKeys" json:"deviceKeys,omitempty"`
}

func (m *CreateDeviceKeysRequest) Reset()                    { *m = CreateDeviceKeysRequest{} }
func (m *CreateDeviceKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceKeysRequest) ProtoMessage()               {}
func (*CreateDeviceKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateDeviceKeysRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *CreateDeviceKeysRequest) GetDeviceKeys() *DeviceKeys {
	if m != nil {
		return m.DeviceKeys
	}
	return nil
}

type CreateDeviceKeysResponse struct {
}

func (m *CreateDeviceKeysResponse) Reset()                    { *m = CreateDeviceKeysResponse{} }
func (m *CreateDeviceKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceKeysResponse) ProtoMessage()               {}
func (*CreateDeviceKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type GetDeviceKeysRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *GetDeviceKeysRequest) Reset()                    { *m = GetDeviceKeysRequest{} }
func (m *GetDeviceKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceKeysRequest) ProtoMessage()               {}
func (*GetDeviceKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetDeviceKeysRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type GetDeviceKeysResponse struct {
	DeviceKeys *DeviceKeys `protobuf:"bytes,1,opt,name=deviceKeys" json:"deviceKeys,omitempty"`
}

func (m *GetDeviceKeysResponse) Reset()                    { *m = GetDeviceKeysResponse{} }
func (m *GetDeviceKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceKeysResponse) ProtoMessage()               {}
func (*GetDeviceKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetDeviceKeysResponse) GetDeviceKeys() *DeviceKeys {
	if m != nil {
		return m.DeviceKeys
	}
	return nil
}

type UpdateDeviceKeysRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI     string      `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	DeviceKeys *DeviceKeys `protobuf:"bytes,2,opt,name=deviceKeys" json:"deviceKeys,omitempty"`
}

func (m *UpdateDeviceKeysRequest) Reset()                    { *m = UpdateDeviceKeysRequest{} }
func (m *UpdateDeviceKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceKeysRequest) ProtoMessage()               {}
func (*UpdateDeviceKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateDeviceKeysRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *UpdateDeviceKeysRequest) GetDeviceKeys() *DeviceKeys {
	if m != nil {
		return m.DeviceKeys
	}
	return nil
}

type UpdateDeviceKeysResponse struct {
}

func (m *UpdateDeviceKeysResponse) Reset()                    { *m = UpdateDeviceKeysResponse{} }
func (m *UpdateDeviceKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceKeysResponse) ProtoMessage()               {}
func (*UpdateDeviceKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type DeleteDeviceKeysRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *DeleteDeviceKeysRequest) Reset()                    { *m = DeleteDeviceKeysRequest{} }
func (m *DeleteDeviceKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceKeysRequest) ProtoMessage()               {}
func (*DeleteDeviceKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteDeviceKeysRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type DeleteDeviceKeysResponse struct {
}

func (m *DeleteDeviceKeysResponse) Reset()                    { *m = DeleteDeviceKeysResponse{} }
func (m *DeleteDeviceKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceKeysResponse) ProtoMessage()               {}
func (*DeleteDeviceKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ActivateDeviceRequest struct {
	// Hex encoded DevEUI of the device to activate.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,2,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,3,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,4,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// Skip frame-counter checks (this is insecure, but could be helpful for debugging).
	SkipFCntCheck bool `protobuf:"varint,7,opt,name=skipFCntCheck" json:"skipFCntCheck,omitempty"`
}

func (m *ActivateDeviceRequest) Reset()                    { *m = ActivateDeviceRequest{} }
func (m *ActivateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateDeviceRequest) ProtoMessage()               {}
func (*ActivateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ActivateDeviceRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *ActivateDeviceRequest) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *ActivateDeviceRequest) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *ActivateDeviceRequest) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *ActivateDeviceRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *ActivateDeviceRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *ActivateDeviceRequest) GetSkipFCntCheck() bool {
	if m != nil {
		return m.SkipFCntCheck
	}
	return false
}

type ActivateDeviceResponse struct {
}

func (m *ActivateDeviceResponse) Reset()                    { *m = ActivateDeviceResponse{} }
func (m *ActivateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateDeviceResponse) ProtoMessage()               {}
func (*ActivateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type GetDeviceActivationRequest struct {
	// Hex encoded DevEUI of the device.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *GetDeviceActivationRequest) Reset()                    { *m = GetDeviceActivationRequest{} }
func (m *GetDeviceActivationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceActivationRequest) ProtoMessage()               {}
func (*GetDeviceActivationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetDeviceActivationRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type GetDeviceActivationResponse struct {
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
	// Hex encoded AppSKey.
	AppSKey string `protobuf:"bytes,2,opt,name=appSKey" json:"appSKey,omitempty"`
	// Hex encoded NwkSKey.
	NwkSKey string `protobuf:"bytes,3,opt,name=nwkSKey" json:"nwkSKey,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,4,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// Downlink frame-counter.
	FCntDown uint32 `protobuf:"varint,5,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// Skip frame-counter checks (this is insecure, but could be helpful for debugging).
	SkipFCntCheck bool `protobuf:"varint,6,opt,name=skipFCntCheck" json:"skipFCntCheck,omitempty"`
}

func (m *GetDeviceActivationResponse) Reset()                    { *m = GetDeviceActivationResponse{} }
func (m *GetDeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceActivationResponse) ProtoMessage()               {}
func (*GetDeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetDeviceActivationResponse) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

func (m *GetDeviceActivationResponse) GetAppSKey() string {
	if m != nil {
		return m.AppSKey
	}
	return ""
}

func (m *GetDeviceActivationResponse) GetNwkSKey() string {
	if m != nil {
		return m.NwkSKey
	}
	return ""
}

func (m *GetDeviceActivationResponse) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *GetDeviceActivationResponse) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *GetDeviceActivationResponse) GetSkipFCntCheck() bool {
	if m != nil {
		return m.SkipFCntCheck
	}
	return false
}

type GetRandomDevAddrRequest struct {
	// Hex encoded DevEUI of the device to activate.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetRandomDevAddrRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type GetRandomDevAddrResponse struct {
	// Hex encoded DevAddr.
	DevAddr string `protobuf:"bytes,1,opt,name=devAddr" json:"devAddr,omitempty"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetRandomDevAddrResponse) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

type StreamDeviceFrameLogsRequest struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *StreamDeviceFrameLogsRequest) Reset()                    { *m = StreamDeviceFrameLogsRequest{} }
func (m *StreamDeviceFrameLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamDeviceFrameLogsRequest) ProtoMessage()               {}
func (*StreamDeviceFrameLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *StreamDeviceFrameLogsRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type StreamDeviceFrameLogsResponse struct {
	// Contains zero or one uplink frame.
	UplinkFrames []*UplinkFrameLog `protobuf:"bytes,1,rep,name=uplinkFrames" json:"uplinkFrames,omitempty"`
	// Contains zero or one downlink frame.
	DownlinkFrames []*DownlinkFrameLog `protobuf:"bytes,2,rep,name=downlinkFrames" json:"downlinkFrames,omitempty"`
}

func (m *StreamDeviceFrameLogsResponse) Reset()                    { *m = StreamDeviceFrameLogsResponse{} }
func (m *StreamDeviceFrameLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamDeviceFrameLogsResponse) ProtoMessage()               {}
func (*StreamDeviceFrameLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *StreamDeviceFrameLogsResponse) GetUplinkFrames() []*UplinkFrameLog {
	if m != nil {
		return m.UplinkFrames
	}
	return nil
}

func (m *StreamDeviceFrameLogsResponse) GetDownlinkFrames() []*DownlinkFrameLog {
	if m != nil {
		return m.DownlinkFrames
	}
	return nil
}

type StreamDeviceEventLogsRequest struct {
	// Hex encoded DevEUI.
	DevEUI string `protobuf:"bytes,1,opt,name=devEUI" json:"devEUI,omitempty"`
}

func (m *StreamDeviceEventLogsRequest) Reset()                    { *m = StreamDeviceEventLogsRequest{} }
func (m *StreamDeviceEventLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamDeviceEventLogsRequest) ProtoMessage()               {}
func (*StreamDeviceEventLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *StreamDeviceEventLogsRequest) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

type StreamDeviceEventLogsResponse struct {
	// The event type.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The event payload in JSON encoding.
	PayloadJSON string `protobuf:"bytes,2,opt,name=payloadJSON" json:"payloadJSON,omitempty"`
}

func (m *StreamDeviceEventLogsResponse) Reset()                    { *m = StreamDeviceEventLogsResponse{} }
func (m *StreamDeviceEventLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamDeviceEventLogsResponse) ProtoMessage()               {}
func (*StreamDeviceEventLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *StreamDeviceEventLogsResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StreamDeviceEventLogsResponse) GetPayloadJSON() string {
	if m != nil {
		return m.PayloadJSON
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceKeys)(nil), "api.DeviceKeys")
	proto.RegisterType((*CreateDeviceRequest)(nil), "api.CreateDeviceRequest")
	proto.RegisterType((*CreateDeviceResponse)(nil), "api.CreateDeviceResponse")
	proto.RegisterType((*GetDeviceRequest)(nil), "api.GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "api.GetDeviceResponse")
	proto.RegisterType((*DeleteDeviceRequest)(nil), "api.DeleteDeviceRequest")
	proto.RegisterType((*DeleteDeviceResponse)(nil), "api.DeleteDeviceResponse")
	proto.RegisterType((*ListDeviceByApplicationIDRequest)(nil), "api.ListDeviceByApplicationIDRequest")
	proto.RegisterType((*DeviceListItem)(nil), "api.DeviceListItem")
	proto.RegisterType((*ListDeviceResponse)(nil), "api.ListDeviceResponse")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "api.UpdateDeviceRequest")
	proto.RegisterType((*UpdateDeviceResponse)(nil), "api.UpdateDeviceResponse")
	proto.RegisterType((*CreateDeviceKeysRequest)(nil), "api.CreateDeviceKeysRequest")
	proto.RegisterType((*CreateDeviceKeysResponse)(nil), "api.CreateDeviceKeysResponse")
	proto.RegisterType((*GetDeviceKeysRequest)(nil), "api.GetDeviceKeysRequest")
	proto.RegisterType((*GetDeviceKeysResponse)(nil), "api.GetDeviceKeysResponse")
	proto.RegisterType((*UpdateDeviceKeysRequest)(nil), "api.UpdateDeviceKeysRequest")
	proto.RegisterType((*UpdateDeviceKeysResponse)(nil), "api.UpdateDeviceKeysResponse")
	proto.RegisterType((*DeleteDeviceKeysRequest)(nil), "api.DeleteDeviceKeysRequest")
	proto.RegisterType((*DeleteDeviceKeysResponse)(nil), "api.DeleteDeviceKeysResponse")
	proto.RegisterType((*ActivateDeviceRequest)(nil), "api.ActivateDeviceRequest")
	proto.RegisterType((*ActivateDeviceResponse)(nil), "api.ActivateDeviceResponse")
	proto.RegisterType((*GetDeviceActivationRequest)(nil), "api.GetDeviceActivationRequest")
	proto.RegisterType((*GetDeviceActivationResponse)(nil), "api.GetDeviceActivationResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "api.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "api.GetRandomDevAddrResponse")
	proto.RegisterType((*StreamDeviceFrameLogsRequest)(nil), "api.StreamDeviceFrameLogsRequest")
	proto.RegisterType((*StreamDeviceFrameLogsResponse)(nil), "api.StreamDeviceFrameLogsResponse")
	proto.RegisterType((*StreamDeviceEventLogsRequest)(nil), "api.StreamDeviceEventLogsRequest")
	proto.RegisterType((*StreamDeviceEventLogsResponse)(nil), "api.StreamDeviceEventLogsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Device service

type DeviceClient interface {
	// Create creates the given device.
	Create(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	// Get returns the device matching the given DevEUI.
	Get(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// Delete deletes the device matching the given DevEUI.
	Delete(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	// ListByApplicationID lists the devices by the given application ID, sorted by the name of the device.
	ListByApplicationID(ctx context.Context, in *ListDeviceByApplicationIDRequest, opts ...grpc.CallOption) (*ListDeviceResponse, error)
	// Update updates the device matching the given DevEUI.
	Update(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	// CreateKeys creates the given device-keys.
	CreateKeys(ctx context.Context, in *CreateDeviceKeysRequest, opts ...grpc.CallOption) (*CreateDeviceKeysResponse, error)
	// GetKeys returns the device-keys for the given DevEUI.
	GetKeys(ctx context.Context, in *GetDeviceKeysRequest, opts ...grpc.CallOption) (*GetDeviceKeysResponse, error)
	// UpdateKeys updates the device-keys.
	UpdateKeys(ctx context.Context, in *UpdateDeviceKeysRequest, opts ...grpc.CallOption) (*UpdateDeviceKeysResponse, error)
	// DeleteKeys deletes the device-keys for the given DevEUI.
	DeleteKeys(ctx context.Context, in *DeleteDeviceKeysRequest, opts ...grpc.CallOption) (*DeleteDeviceKeysResponse, error)
	// Activate (re)activates the device (only when ABP is set to true).
	Activate(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*ActivateDeviceResponse, error)
	// GetActivation returns the current activation details of the device (OTAA and ABP).
	GetActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.
	// Note: these are the raw LoRaWAN frames and this endpoint is intended for debugging.
	StreamFrameLogs(ctx context.Context, in *StreamDeviceFrameLogsRequest, opts ...grpc.CallOption) (Device_StreamFrameLogsClient, error)
	// StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).
	// Note: this endpoint is intended for debugging and should not be used for building
	// integrations.
	StreamEventLogs(ctx context.Context, in *StreamDeviceEventLogsRequest, opts ...grpc.CallOption) (Device_StreamEventLogsClient, error)
}

type deviceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceClient(cc *grpc.ClientConn) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) Create(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/api.Device/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Get(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := grpc.Invoke(ctx, "/api.Device/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Delete(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := grpc.Invoke(ctx, "/api.Device/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) ListByApplicationID(ctx context.Context, in *ListDeviceByApplicationIDRequest, opts ...grpc.CallOption) (*ListDeviceResponse, error) {
	out := new(ListDeviceResponse)
	err := grpc.Invoke(ctx, "/api.Device/ListByApplicationID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Update(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := grpc.Invoke(ctx, "/api.Device/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) CreateKeys(ctx context.Context, in *CreateDeviceKeysRequest, opts ...grpc.CallOption) (*CreateDeviceKeysResponse, error) {
	out := new(CreateDeviceKeysResponse)
	err := grpc.Invoke(ctx, "/api.Device/CreateKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) GetKeys(ctx context.Context, in *GetDeviceKeysRequest, opts ...grpc.CallOption) (*GetDeviceKeysResponse, error) {
	out := new(GetDeviceKeysResponse)
	err := grpc.Invoke(ctx, "/api.Device/GetKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) UpdateKeys(ctx context.Context, in *UpdateDeviceKeysRequest, opts ...grpc.CallOption) (*UpdateDeviceKeysResponse, error) {
	out := new(UpdateDeviceKeysResponse)
	err := grpc.Invoke(ctx, "/api.Device/UpdateKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) DeleteKeys(ctx context.Context, in *DeleteDeviceKeysRequest, opts ...grpc.CallOption) (*DeleteDeviceKeysResponse, error) {
	out := new(DeleteDeviceKeysResponse)
	err := grpc.Invoke(ctx, "/api.Device/DeleteKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Activate(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*ActivateDeviceResponse, error) {
	out := new(ActivateDeviceResponse)
	err := grpc.Invoke(ctx, "/api.Device/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) GetActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error) {
	out := new(GetDeviceActivationResponse)
	err := grpc.Invoke(ctx, "/api.Device/GetActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/api.Device/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) StreamFrameLogs(ctx context.Context, in *StreamDeviceFrameLogsRequest, opts ...grpc.CallOption) (Device_StreamFrameLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Device_serviceDesc.Streams[0], c.cc, "/api.Device/StreamFrameLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStreamFrameLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Device_StreamFrameLogsClient interface {
	Recv() (*StreamDeviceFrameLogsResponse, error)
	grpc.ClientStream
}

type deviceStreamFrameLogsClient struct {
	grpc.ClientStream
}

func (x *deviceStreamFrameLogsClient) Recv() (*StreamDeviceFrameLogsResponse, error) {
	m := new(StreamDeviceFrameLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceClient) StreamEventLogs(ctx context.Context, in *StreamDeviceEventLogsRequest, opts ...grpc.CallOption) (Device_StreamEventLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Device_serviceDesc.Streams[1], c.cc, "/api.Device/StreamEventLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceStreamEventLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Device_StreamEventLogsClient interface {
	Recv() (*StreamDeviceEventLogsResponse, error)
	grpc.ClientStream
}

type deviceStreamEventLogsClient struct {
	grpc.ClientStream
}

func (x *deviceStreamEventLogsClient) Recv() (*StreamDeviceEventLogsResponse, error) {
	m := new(StreamDeviceEventLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Device service

type DeviceServer interface {
	// Create creates the given device.
	Create(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	// Get returns the device matching the given DevEUI.
	Get(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	// Delete deletes the device matching the given DevEUI.
	Delete(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	// ListByApplicationID lists the devices by the given application ID, sorted by the name of the device.
	ListByApplicationID(context.Context, *ListDeviceByApplicationIDRequest) (*ListDeviceResponse, error)
	// Update updates the device matching the given DevEUI.
	Update(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	// CreateKeys creates the given device-keys.
	CreateKeys(context.Context, *CreateDeviceKeysRequest) (*CreateDeviceKeysResponse, error)
	// GetKeys returns the device-keys for the given DevEUI.
	GetKeys(context.Context, *GetDeviceKeysRequest) (*GetDeviceKeysResponse, error)
	// UpdateKeys updates the device-keys.
	UpdateKeys(context.Context, *UpdateDeviceKeysRequest) (*UpdateDeviceKeysResponse, error)
	// DeleteKeys deletes the device-keys for the given DevEUI.
	DeleteKeys(context.Context, *DeleteDeviceKeysRequest) (*DeleteDeviceKeysResponse, error)
	// Activate (re)activates the device (only when ABP is set to true).
	Activate(context.Context, *ActivateDeviceRequest) (*ActivateDeviceResponse, error)
	// GetActivation returns the current activation details of the device (OTAA and ABP).
	GetActivation(context.Context, *GetDeviceActivationRequest) (*GetDeviceActivationResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
	// StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.
	// Note: these are the raw LoRaWAN frames and this endpoint is intended for debugging.
	StreamFrameLogs(*StreamDeviceFrameLogsRequest, Device_StreamFrameLogsServer) error
	// StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).
	// Note: this endpoint is intended for debugging and should not be used for building
	// integrations.
	StreamEventLogs(*StreamDeviceEventLogsRequest, Device_StreamEventLogsServer) error
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Create(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Get(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Delete(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_ListByApplicationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceByApplicationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).ListByApplicationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/ListByApplicationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).ListByApplicationID(ctx, req.(*ListDeviceByApplicationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Update(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_CreateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).CreateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/CreateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).CreateKeys(ctx, req.(*CreateDeviceKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetKeys(ctx, req.(*GetDeviceKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_UpdateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).UpdateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/UpdateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).UpdateKeys(ctx, req.(*UpdateDeviceKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_DeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).DeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/DeleteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).DeleteKeys(ctx, req.(*DeleteDeviceKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Activate(ctx, req.(*ActivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_GetActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/GetActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetActivation(ctx, req.(*GetDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Device/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_StreamFrameLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceFrameLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServer).StreamFrameLogs(m, &deviceStreamFrameLogsServer{stream})
}

type Device_StreamFrameLogsServer interface {
	Send(*StreamDeviceFrameLogsResponse) error
	grpc.ServerStream
}

type deviceStreamFrameLogsServer struct {
	grpc.ServerStream
}

func (x *deviceStreamFrameLogsServer) Send(m *StreamDeviceFrameLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Device_StreamEventLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceEventLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceServer).StreamEventLogs(m, &deviceStreamEventLogsServer{stream})
}

type Device_StreamEventLogsServer interface {
	Send(*StreamDeviceEventLogsResponse) error
	grpc.ServerStream
}

type deviceStreamEventLogsServer struct {
	grpc.ServerStream
}

func (x *deviceStreamEventLogsServer) Send(m *StreamDeviceEventLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Device_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Device_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Device_Delete_Handler,
		},
		{
			MethodName: "ListByApplicationID",
			Handler:    _Device_ListByApplicationID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Device_Update_Handler,
		},
		{
			MethodName: "CreateKeys",
			Handler:    _Device_CreateKeys_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _Device_GetKeys_Handler,
		},
		{
			MethodName: "UpdateKeys",
			Handler:    _Device_UpdateKeys_Handler,
		},
		{
			MethodName: "DeleteKeys",
			Handler:    _Device_DeleteKeys_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Device_Activate_Handler,
		},
		{
			MethodName: "GetActivation",
			Handler:    _Device_GetActivation_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _Device_GetRandomDevAddr_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrameLogs",
			Handler:       _Device_StreamFrameLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEventLogs",
			Handler:       _Device_StreamEventLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device.proto",
}

func init() { proto.RegisterFile("device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xc6, 0x89, 0x9b, 0xbc, 0xfc, 0x23, 0xe3, 0x38, 0xde, 0x6e, 0x93, 0xd4, 0x2c, 0x29,
	0x72, 0x53, 0xb0, 0xd3, 0x50, 0x81, 0x84, 0xc4, 0x21, 0x8d, 0xdb, 0x10, 0x1a, 0x0a, 0x5a, 0x2b,
	0x9c, 0x90, 0xd0, 0xc4, 0x3b, 0x71, 0x57, 0xb1, 0x77, 0x96, 0xdd, 0x49, 0x22, 0xab, 0x54, 0x20,
	0x4e, 0x9c, 0xb8, 0x70, 0xe0, 0x53, 0x70, 0xea, 0x67, 0xe0, 0x13, 0x70, 0xe0, 0xc6, 0x89, 0x0f,
	0x82, 0xe6, 0x8f, 0xed, 0xd9, 0xf5, 0x6c, 0x6c, 0x0e, 0x48, 0xe5, 0xe6, 0x79, 0xef, 0xcd, 0xfb,
	0xbd, 0xdf, 0x9b, 0x37, 0xef, 0xcd, 0x1a, 0x96, 0x7c, 0x72, 0x15, 0xb4, 0x49, 0x3d, 0x8a, 0x29,
	0xa3, 0xa8, 0x80, 0xa3, 0xc0, 0xd9, 0xec, 0x50, 0xda, 0xe9, 0x92, 0x06, 0x8e, 0x82, 0x06, 0x0e,
	0x43, 0xca, 0x30, 0x0b, 0x68, 0x98, 0x48, 0x13, 0x67, 0xa9, 0x4d, 0x7b, 0x3d, 0x1a, 0xca, 0x95,
	0xbb, 0x03, 0xd0, 0x14, 0x0e, 0x9e, 0x91, 0x7e, 0x82, 0x36, 0xa0, 0x88, 0xa3, 0xe8, 0x19, 0xe9,
	0xdb, 0x56, 0xd5, 0xaa, 0x2d, 0x78, 0x6a, 0xe5, 0xbe, 0xb6, 0xa0, 0x74, 0x18, 0x13, 0xcc, 0x88,
	0x34, 0xf6, 0xc8, 0xb7, 0x97, 0x24, 0x61, 0xdc, 0xde, 0x27, 0x57, 0x4f, 0x4e, 0x8f, 0x07, 0xf6,
	0x72, 0x85, 0x10, 0xcc, 0x86, 0xb8, 0x47, 0xec, 0x05, 0x21, 0x15, 0xbf, 0xd1, 0x0e, 0x2c, 0xe3,
	0x28, 0xea, 0x06, 0x6d, 0x11, 0xcd, 0x71, 0xd3, 0x5e, 0xae, 0x5a, 0xb5, 0x82, 0x97, 0x16, 0xa2,
	0x2a, 0x2c, 0xfa, 0x24, 0x69, 0xc7, 0x41, 0xc4, 0x05, 0xf6, 0x8a, 0x70, 0xa0, 0x8b, 0x50, 0x0d,
	0x56, 0x25, 0xe5, 0x2f, 0x63, 0x7a, 0x1e, 0x74, 0xc9, 0x71, 0xd3, 0x46, 0xc2, 0x2a, 0x2b, 0x76,
	0x37, 0x60, 0x3d, 0x1d, 0x74, 0x12, 0xd1, 0x30, 0x21, 0xee, 0x2e, 0xbc, 0x75, 0x44, 0xd8, 0x54,
	0x4c, 0xdc, 0xd7, 0x33, 0xb0, 0xa6, 0x19, 0x4b, 0x0f, 0x6f, 0x36, 0x6f, 0xb4, 0x07, 0x25, 0x29,
	0x6a, 0x31, 0xcc, 0x2e, 0x93, 0xc7, 0x98, 0x31, 0x12, 0xf7, 0xed, 0x52, 0xd5, 0xaa, 0x2d, 0x7b,
	0x26, 0x15, 0xaa, 0x03, 0xd2, 0xc5, 0x9f, 0xe3, 0xb8, 0x13, 0x84, 0xf6, 0x7a, 0xd5, 0xaa, 0xcd,
	0x79, 0x06, 0x0d, 0xda, 0x06, 0xe8, 0xe2, 0x84, 0xb5, 0x08, 0x09, 0x0f, 0x98, 0x5d, 0x16, 0x61,
	0x68, 0x12, 0xf7, 0x7d, 0x28, 0x35, 0x49, 0x97, 0x4c, 0x59, 0x2e, 0xfc, 0xa0, 0xd2, 0xe6, 0xea,
	0xa0, 0x7e, 0xb6, 0xa0, 0x7a, 0x12, 0x24, 0x2a, 0xfb, 0x8f, 0xfb, 0x07, 0x7a, 0xca, 0x06, 0x4e,
	0xc7, 0xf2, 0x5b, 0x30, 0xe5, 0x77, 0x1d, 0xe6, 0xba, 0x41, 0x2f, 0x60, 0x02, 0xb9, 0xe0, 0xc9,
	0x05, 0x0f, 0x88, 0x9e, 0x9f, 0x27, 0x84, 0xd9, 0x33, 0x42, 0xac, 0x56, 0x5c, 0x9e, 0x10, 0x1c,
	0xb7, 0x5f, 0xd8, 0xb3, 0x32, 0x50, 0xb9, 0x72, 0xff, 0x9a, 0x81, 0x15, 0x19, 0x0c, 0x0f, 0xeb,
	0x98, 0x91, 0xde, 0x1b, 0x5e, 0x0a, 0xef, 0xc1, 0x5a, 0x4a, 0xf4, 0x9c, 0x87, 0x54, 0x12, 0xb6,
	0xe3, 0x8a, 0xbc, 0xc2, 0x59, 0xff, 0xb7, 0x85, 0x53, 0x9e, 0xb2, 0x70, 0x36, 0xc6, 0x0a, 0x07,
	0x03, 0x1a, 0x1d, 0xf8, 0xf0, 0xba, 0x6d, 0x03, 0x30, 0xca, 0x70, 0xf7, 0x90, 0x5e, 0x86, 0x83,
	0x13, 0xd4, 0x24, 0xe8, 0x01, 0x14, 0x63, 0x92, 0x5c, 0x76, 0xf9, 0x31, 0x16, 0x6a, 0x8b, 0xfb,
	0xa5, 0x3a, 0x8e, 0x82, 0x7a, 0xfa, 0xa0, 0x3c, 0x65, 0x22, 0x7a, 0xd9, 0x69, 0xe4, 0xff, 0xff,
	0x7a, 0x59, 0x3a, 0x68, 0x75, 0x45, 0xce, 0xa0, 0xa2, 0xf7, 0x38, 0xde, 0xc5, 0x27, 0x11, 0x6a,
	0x00, 0xf8, 0x43, 0x63, 0x51, 0xf8, 0x8b, 0xfb, 0xab, 0x5a, 0xc6, 0x84, 0x0f, 0xcd, 0xc4, 0x75,
	0xc0, 0x1e, 0xc7, 0x50, 0xf8, 0x75, 0x58, 0x1f, 0xb6, 0xc7, 0x29, 0xc0, 0xdd, 0x4f, 0xa1, 0x9c,
	0xb1, 0x57, 0x67, 0x9c, 0x8e, 0xca, 0x9a, 0x1c, 0xd5, 0x19, 0x54, 0xf4, 0x8c, 0xfc, 0x57, 0xcc,
	0xc7, 0x31, 0x14, 0xf3, 0x87, 0x50, 0xd1, 0x9b, 0xd6, 0x34, 0xe4, 0x1d, 0xb0, 0xc7, 0xb7, 0x28,
	0x77, 0x7f, 0x5a, 0x50, 0x3e, 0x68, 0xb3, 0xe0, 0x6a, 0xea, 0xc2, 0xb4, 0xe1, 0x96, 0x4f, 0xae,
	0x0e, 0x7c, 0x3f, 0x16, 0x54, 0x16, 0xbc, 0xc1, 0x92, 0x6b, 0x70, 0x14, 0xb5, 0xf8, 0x1c, 0x2f,
	0x48, 0x8d, 0x5a, 0x72, 0x4d, 0x78, 0x7d, 0x21, 0x34, 0xb2, 0xb3, 0x0d, 0x96, 0x1c, 0xe5, 0xfc,
	0x30, 0x64, 0xa7, 0x91, 0x3d, 0x27, 0xae, 0xbb, 0x5a, 0x21, 0x07, 0xe6, 0xf9, 0xaf, 0x26, 0xbd,
	0x0e, 0xed, 0xa2, 0xd0, 0x0c, 0xd7, 0xfc, 0x1a, 0x24, 0x17, 0x41, 0xf4, 0xf4, 0x30, 0x64, 0x87,
	0x2f, 0x48, 0xfb, 0xc2, 0xbe, 0x55, 0xb5, 0x6a, 0xf3, 0x5e, 0x5a, 0xe8, 0xda, 0xb0, 0x91, 0x25,
	0xa6, 0x38, 0x3f, 0x02, 0x67, 0x58, 0x0c, 0xca, 0x24, 0xa0, 0xe1, 0xa4, 0x2c, 0xfe, 0x6e, 0xc1,
	0x1d, 0xe3, 0x36, 0x55, 0x49, 0x5a, 0x5e, 0xac, 0xdc, 0xbc, 0xcc, 0xe4, 0xe6, 0xa5, 0x90, 0x97,
	0x97, 0xd9, 0xdc, 0xbc, 0xcc, 0x4d, 0xca, 0x4b, 0xd1, 0x94, 0x97, 0x87, 0x50, 0x39, 0x22, 0xcc,
	0xc3, 0xa1, 0x4f, 0x7b, 0x4d, 0x19, 0xe1, 0x24, 0xea, 0x8f, 0xc0, 0x1e, 0xdf, 0x32, 0x89, 0xb6,
	0xfb, 0x21, 0x6c, 0xb6, 0x58, 0x4c, 0x70, 0x4f, 0xa6, 0xec, 0x69, 0x8c, 0x7b, 0xe4, 0x84, 0x76,
	0x26, 0x96, 0xeb, 0xaf, 0x16, 0x6c, 0xe5, 0x6c, 0x54, 0x98, 0x1f, 0xc1, 0xd2, 0x65, 0xd4, 0x0d,
	0xc2, 0x0b, 0xa1, 0xe2, 0xd7, 0x76, 0xd4, 0x7e, 0x4f, 0x47, 0x8a, 0x13, 0xda, 0xf1, 0x52, 0x86,
	0xe8, 0x13, 0x58, 0xf1, 0xe9, 0x75, 0xa8, 0x6d, 0x95, 0x9d, 0xbb, 0x2c, 0x6f, 0xa3, 0xae, 0xe2,
	0x9b, 0x33, 0xc6, 0x59, 0x46, 0x4f, 0xae, 0x48, 0xc8, 0xa6, 0x61, 0x74, 0x9a, 0x26, 0xa4, 0xed,
	0x53, 0x84, 0x10, 0xcc, 0xb2, 0x7e, 0x44, 0xd4, 0x36, 0xf1, 0x9b, 0xb7, 0xf1, 0x08, 0xf7, 0xbb,
	0x14, 0xfb, 0x9f, 0xb5, 0xbe, 0x78, 0xae, 0x2a, 0x47, 0x17, 0xed, 0xff, 0xb6, 0x04, 0x45, 0xe9,
	0x11, 0x7d, 0x05, 0x45, 0xd9, 0x2b, 0x91, 0x2d, 0xa8, 0x18, 0x5e, 0xcd, 0xce, 0x6d, 0x83, 0x46,
	0xdd, 0x88, 0xca, 0x8f, 0x7f, 0xfc, 0xfd, 0xcb, 0xcc, 0x9a, 0xbb, 0x24, 0x1e, 0xef, 0xb2, 0x13,
	0x25, 0x1f, 0x5b, 0xbb, 0xa8, 0x05, 0x85, 0x23, 0xc2, 0x90, 0xcc, 0x4f, 0xf6, 0xf5, 0xea, 0x6c,
	0x64, 0xc5, 0xca, 0xdd, 0x96, 0x70, 0x57, 0x41, 0x65, 0xdd, 0x5d, 0xe3, 0xa5, 0xcc, 0xc6, 0x2b,
	0xf4, 0x35, 0x0f, 0x9b, 0xf7, 0x23, 0x15, 0xac, 0xe1, 0xcd, 0xa6, 0x82, 0x35, 0x3e, 0xcf, 0x94,
	0xf7, 0xdd, 0x1c, 0xef, 0x3f, 0x59, 0x50, 0xe2, 0xd3, 0x37, 0xf3, 0x6e, 0x43, 0xf7, 0x84, 0xc7,
	0x49, 0xef, 0x3a, 0xa7, 0x92, 0x31, 0x1b, 0x35, 0x5e, 0x01, 0xfb, 0x00, 0xdd, 0x97, 0x1f, 0x38,
	0xa3, 0xbd, 0x49, 0xe3, 0x65, 0x6a, 0x00, 0xbf, 0x1a, 0xc4, 0x84, 0xbe, 0x81, 0xa2, 0xec, 0xe3,
	0x8a, 0xa8, 0x61, 0xfe, 0x2b, 0xa2, 0xc6, 0x21, 0x5b, 0x15, 0x88, 0x8e, 0x63, 0x26, 0xca, 0x8f,
	0x27, 0x02, 0x90, 0xe7, 0x29, 0x3e, 0xa3, 0x36, 0xc7, 0x0e, 0x58, 0x9b, 0x0e, 0xce, 0x56, 0x8e,
	0x56, 0x81, 0xdd, 0x13, 0x60, 0x77, 0x5d, 0xc7, 0x08, 0xd6, 0xb8, 0x20, 0x7d, 0x51, 0x10, 0x3e,
	0xdc, 0x3a, 0x22, 0x4c, 0xc0, 0xdd, 0x4e, 0x9f, 0xbe, 0x8e, 0xe5, 0x98, 0x54, 0x0a, 0xc8, 0x15,
	0x40, 0x9b, 0xe8, 0x06, 0x20, 0xce, 0x4b, 0x66, 0x44, 0xe3, 0x95, 0x33, 0x75, 0x15, 0xaf, 0xdc,
	0x79, 0xa9, 0x78, 0x39, 0x13, 0x78, 0xf5, 0xf8, 0x07, 0x29, 0x2f, 0x36, 0x0d, 0x31, 0x67, 0xce,
	0x2a, 0xc4, 0xdc, 0x91, 0xaa, 0x08, 0xee, 0xde, 0x44, 0x30, 0x84, 0xf9, 0xc1, 0x70, 0x42, 0x32,
	0x59, 0xc6, 0x21, 0xec, 0xdc, 0x31, 0xea, 0x14, 0xd0, 0x7d, 0x01, 0xf4, 0x8e, 0xbb, 0x6d, 0x06,
	0xc2, 0x6a, 0x17, 0xa7, 0xf7, 0x1d, 0x2c, 0x1f, 0x11, 0x36, 0x9a, 0x5a, 0xe8, 0x6e, 0xfa, 0x84,
	0xc6, 0xc6, 0xa0, 0x53, 0xcd, 0x37, 0x50, 0xf0, 0x35, 0x01, 0xef, 0xa2, 0xea, 0x8d, 0xf0, 0x1c,
	0xec, 0x7b, 0xf1, 0xe5, 0x9b, 0x9a, 0x1f, 0x2a, 0xc5, 0x39, 0x93, 0x48, 0xa5, 0x38, 0x6f, 0xe8,
	0xb8, 0x75, 0x01, 0x5d, 0x73, 0xdf, 0x35, 0x43, 0x77, 0xb2, 0x60, 0x3f, 0x58, 0xb0, 0x2a, 0x3b,
	0xf0, 0x70, 0x98, 0xa0, 0xb7, 0x05, 0xc4, 0x4d, 0x13, 0xca, 0x71, 0x6f, 0x32, 0x51, 0xa1, 0xec,
	0x88, 0x50, 0xb6, 0xd1, 0xa6, 0x39, 0x94, 0x73, 0x31, 0x39, 0xf6, 0x2c, 0x2d, 0x84, 0x61, 0xfb,
	0x37, 0x84, 0x90, 0x1d, 0x29, 0x86, 0x10, 0xc6, 0xa6, 0xc7, 0xa4, 0x10, 0x08, 0xdf, 0x90, 0xec,
	0x59, 0x67, 0x45, 0xf1, 0xdf, 0xcb, 0x07, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xda, 0x10, 0x18,
	0x3d, 0xbc, 0x11, 0x00, 0x00,
}
